<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Construction of a simple pipeline to run BLAST jobs &mdash; ruffus v2.2 documentation</title>
    <link rel="stylesheet" href="../../_static/ruffus.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../',
        VERSION:     '2.2',
        COLLAPSE_MODINDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../_static/jquery.js"></script>
    <script type="text/javascript" src="../../_static/doctools.js"></script>
    <link rel="top" title="ruffus v2.2 documentation" href="../../index.html" />
    <link rel="next" title="Part 2: A slightly more practical pipeline to run blasts jobs" href="part2.html" />
    <link rel="prev" title="Glossary" href="../../glossary.html" /> 
  </head>
  <body>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="part2.html" title="Part 2: A slightly more practical pipeline to run blasts jobs"
             accesskey="N">next</a> |</li>
        <li class="right" >
          <a href="../../glossary.html" title="Glossary"
             accesskey="P">previous</a> |</li>
        Ruffus v. 2.2
            <li><a href="../../index.html">Home</a> | </li>
            <li><a href="../../contents.html">Contents</a> | </li>
            <li><a href="../../installation.html">Install</a>  | </li>
            <li><a href="../../tutorials/simple_tutorial/simple_tutorial.html">Tutorial</a>  / </li>
            <li><a href="../../tutorials/manual/manual_introduction.html">Manual</a>  / </li>
            <li><a href="">Bioinformatics</a>  | </li>
            <li><a href="../../cheatsheet.html">Cheat sheet</a> | </li>
            <li><a href="../code_template/code_template.html">Python Template</a> | </li>
            <li><a href="../../gallery.html">Gallery</a>  &raquo;</li>
 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <div class="section" id="construction-of-a-simple-pipeline-to-run-blast-jobs">
<span id="examples-bioinformatics-part1"></span><h1>Construction of a simple pipeline to run BLAST jobs<a class="headerlink" href="#construction-of-a-simple-pipeline-to-run-blast-jobs" title="Permalink to this headline">¶</a></h1>
<div class="section" id="overview">
<h2>Overview<a class="headerlink" href="#overview" title="Permalink to this headline">¶</a></h2>
<blockquote>
<p>This is a simple example to illustrate the convenience <strong>Ruffus</strong>
brings to simple tasks in bioinformatics.</p>
<blockquote>
<ol class="arabic simple">
<li><strong>Split</strong> a problem into multiple fragments that can be</li>
<li><strong>Run in parallel</strong> giving partial solutions that can be</li>
<li><strong>Recombined</strong> into the complete solution.</li>
</ol>
</blockquote>
<p>The example code runs a <a class="reference external" href="http://blast.ncbi.nlm.nih.gov/">ncbi</a>
<a class="reference external" href="http://en.wikipedia.org/wiki/BLAST">blast</a> search for four sequences
against the human <a class="reference external" href="http://en.wikipedia.org/wiki/RefSeq">refseq</a> protein sequence database.</p>
<blockquote>
<ol class="arabic simple">
<li><strong>Split</strong> each of the four sequences into a separate file.</li>
<li><strong>Run in parallel</strong> Blastall on each sequence file</li>
<li><strong>Recombine</strong> the BLAST results by simple concatenation.</li>
</ol>
</blockquote>
<p>In real life,</p>
<blockquote>
<ul class="simple">
<li><a class="reference external" href="http://blast.ncbi.nlm.nih.gov/">BLAST</a> already provides support for multiprocessing</li>
<li>Sequence files would be split in much larger chunks, with many sequences</li>
<li>The jobs would be submitted to large computational farms (in our case, using the SunGrid Engine).</li>
<li>The High Scoring Pairs (HSPs) would be parsed / filtered / stored in your own formats.</li>
</ul>
</blockquote>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p>This bioinformatics example is intended to showcase <em>some</em> of the features of Ruffus.</p>
<blockquote class="last">
<ol class="arabic simple">
<li>For a more gentle introduction, please consult the <a class="reference external" href="../../tutorials/simple_tutorial/simple_tutorial.html#simple-tutorial"><em>simple tutorial</em></a>.</li>
<li>The <a class="reference external" href="../../tutorials/manual/manual_introduction.html#manual-introduction"><em>manual</em></a> covers all the features in Ruffus.</li>
</ol>
</blockquote>
</div>
</blockquote>
</div>
<div class="section" id="prerequisites">
<h2>Prerequisites<a class="headerlink" href="#prerequisites" title="Permalink to this headline">¶</a></h2>
<div class="section" id="ruffus">
<h3>1. Ruffus<a class="headerlink" href="#ruffus" title="Permalink to this headline">¶</a></h3>
<blockquote>
<p>To install Ruffus on most systems with python installed:</p>
<blockquote>
<div class="highlight-python"><pre>easy_install -U ruffus</pre>
</div>
</blockquote>
<p>Otherwise, <a class="reference external" href="http://code.google.com/p/ruffus/downloads/list">download</a> Ruffus and run:</p>
<blockquote>
<div class="highlight-python"><pre>tar -xvzf ruffus-xxx.tar.gz
cd ruffus-xxx
./setup install</pre>
</div>
</blockquote>
<p>where xxx is the latest Ruffus version.</p>
</blockquote>
</div>
<div class="section" id="id2">
<h3>2. BLAST<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h3>
<blockquote>
This example assumes that the <a class="reference external" href="http://blast.ncbi.nlm.nih.gov/">BLAST</a> <tt class="docutils literal"><span class="pre">blastall</span></tt> and <tt class="docutils literal"><span class="pre">formatdb</span></tt> executables are
installed and on the search path. Otherwise download from <a class="reference external" href="http://blast.ncbi.nlm.nih.gov/Blast.cgi?CMD=Web&amp;PAGE_TYPE=BlastDocs&amp;DOC_TYPE=Download">here</a>.</blockquote>
</div>
<div class="section" id="human-refseq-sequence-database">
<h3>3. human refseq sequence database<a class="headerlink" href="#human-refseq-sequence-database" title="Permalink to this headline">¶</a></h3>
<blockquote>
<p>We also need to download the human refseq sequence file and format the ncbi database:</p>
<blockquote>
<div class="highlight-python"><pre>wget ftp://ftp.ncbi.nih.gov/refseq/H_sapiens/mRNA_Prot/human.protein.faa.gz
gunzip human.protein.faa.gz

formatdb -i human.protein.faa</pre>
</div>
</blockquote>
</blockquote>
</div>
<div class="section" id="test-sequences">
<h3>4. test sequences<a class="headerlink" href="#test-sequences" title="Permalink to this headline">¶</a></h3>
<blockquote>
Query sequences in FASTA format can be found in <a class="reference external" href="../../_static/examples/bioinformatics/original.fa">original.fa</a></blockquote>
</div>
</div>
<div class="section" id="code">
<h2>Code<a class="headerlink" href="#code" title="Permalink to this headline">¶</a></h2>
<blockquote>
The code for this example can be found <a class="reference external" href="part1_code.html#examples-bioinformatics-part1-code"><em>here</em></a>  and
pasted into the python command shell.</blockquote>
</div>
<div class="section" id="step-1-splitting-up-the-query-sequences">
<h2>Step 1. Splitting up the query sequences<a class="headerlink" href="#step-1-splitting-up-the-query-sequences" title="Permalink to this headline">¶</a></h2>
<blockquote>
<p>We want each of our sequences in the query file <a class="reference external" href="../../_static/examples/bioinformatics/original.fa">original.fa</a> to be placed
in a separate files named <tt class="docutils literal"><span class="pre">XXX.segment</span></tt> where <tt class="docutils literal"><span class="pre">XXX</span></tt> = 1 -&gt; the number of sequences.</p>
<blockquote>
<div class="highlight-python"><div class="highlight"><pre><span class="n">current_file_index</span> <span class="o">=</span> <span class="mf">0</span>
<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;original.fa&quot;</span><span class="p">):</span>
    <span class="c"># start a new file for each accession line</span>
    <span class="k">if</span> <span class="n">line</span><span class="p">[</span><span class="mf">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;&gt;&#39;</span><span class="p">:</span>
        <span class="n">current_file_index</span> <span class="o">+=</span> <span class="mf">1</span>
        <span class="n">current_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%d</span><span class="s">.segment&quot;</span> <span class="o">%</span> <span class="n">current_file_index</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">)</span>
    <span class="n">current_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</pre></div>
</div>
</blockquote>
<p>To use this in a pipeline, we only need to wrap this in a function, &#8220;decorated&#8221; with the Ruffus
keyword <a class="reference external" href="../../tutorials/manual/split.html#manual-split"><em>&#64;split</em></a>:</p>
<blockquote>
<img alt="../../_images/examples_bioinformatics_split.jpg" src="../../_images/examples_bioinformatics_split.jpg" />
</blockquote>
<div class="line-block">
<div class="line">This indicates that we are splitting up the input file <a class="reference external" href="../../_static/examples/bioinformatics/original.fa">original.fa</a> into however many
<tt class="docutils literal"><span class="pre">*.segment</span></tt> files as it takes.</div>
<div class="line">The pipelined function itself takes two arguments, for the input and output.</div>
</div>
<p>We shall see later this simple <a class="reference external" href="../../tutorials/manual/split.html#manual-split"><em>&#64;split</em></a> decorator already gives all the benefits of:</p>
<blockquote>
<ul class="simple">
<li>Dependency checking</li>
<li>Flowchart printing</li>
</ul>
</blockquote>
</blockquote>
</div>
<div class="section" id="step-2-run-blast-jobs-in-parallel">
<h2>Step 2. Run BLAST jobs in parallel<a class="headerlink" href="#step-2-run-blast-jobs-in-parallel" title="Permalink to this headline">¶</a></h2>
<blockquote>
<p>Assuming that blast is already installed, sequence matches can be found with this python
code:</p>
<blockquote>
<div class="highlight-python"><div class="highlight"><pre><span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s">&quot;blastall -p blastp -d human.protein.faa -i 1.segment &gt; 1.blastResult&quot;</span><span class="p">)</span>
</pre></div>
</div>
</blockquote>
<p>To pipeline this, we need to simply wrap in a function, decorated with the <strong>Ruffus</strong>
keyword <a class="reference external" href="../../tutorials/manual/transform.html#manual-transform"><em>&#64;transform</em></a>.</p>
<blockquote>
<img alt="../../_images/examples_bioinformatics_transform.jpg" src="../../_images/examples_bioinformatics_transform.jpg" />
</blockquote>
<p>This indicates that we are taking all the output files from the previous <tt class="docutils literal"><span class="pre">splitFasta</span></tt>
operation (<tt class="docutils literal"><span class="pre">*.segment</span></tt>) and <a class="reference external" href="../../tutorials/manual/transform.html#manual-transform"><em>&#64;transform</em></a>-ing each to a new file with the <tt class="docutils literal"><span class="pre">.blastResult</span></tt>
suffix. Each of these transformation operations can run in parallel if specified.</p>
</blockquote>
</div>
<div class="section" id="step-3-combining-blast-results">
<h2>Step 3. Combining BLAST results<a class="headerlink" href="#step-3-combining-blast-results" title="Permalink to this headline">¶</a></h2>
<blockquote>
<dl class="docutils">
<dt>The following python code will concatenate the results together</dt>
<dd><div class="first last highlight-python"><div class="highlight"><pre><span class="n">output_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;final.blast_results&quot;</span><span class="p">,</span>  <span class="s">&quot;w&quot;</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">glob</span><span class="p">(</span><span class="s">&quot;*.blastResults&quot;</span><span class="p">):</span>
    <span class="n">output_file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
</pre></div>
</div>
</dd>
</dl>
<p>To pipeline this, we need again to decorate with the <strong>Ruffus</strong> keyword <a class="reference external" href="../../tutorials/manual/merge.html#manual-merge"><em>&#64;merge</em></a>.</p>
<blockquote>
<img alt="../../_images/examples_bioinformatics_merge.jpg" src="../../_images/examples_bioinformatics_merge.jpg" />
</blockquote>
<p>This indicates that we are taking all the output files from the previous <tt class="docutils literal"><span class="pre">runBlast</span></tt>
operation (<tt class="docutils literal"><span class="pre">*.blastResults</span></tt>) and <a class="reference external" href="../../tutorials/manual/merge.html#manual-merge"><em>&#64;merge</em></a>-ing them to the new file <tt class="docutils literal"><span class="pre">final.blast_results</span></tt>.</p>
</blockquote>
</div>
<div class="section" id="step-4-running-the-pipeline">
<h2>Step 4. Running the pipeline<a class="headerlink" href="#step-4-running-the-pipeline" title="Permalink to this headline">¶</a></h2>
<blockquote>
<p>We can run the completed pipeline using a maximum of 4 parallel processes by calling
<a class="reference external" href="../../pipeline_functions.html#pipeline-functions-pipeline-run"><em>pipeline_run</em></a> :</p>
<blockquote>
<div class="highlight-python"><div class="highlight"><pre><span class="n">pipeline_run</span><span class="p">([</span><span class="n">combineBlastResults</span><span class="p">],</span> <span class="n">verbose</span> <span class="o">=</span> <span class="mf">2</span><span class="p">,</span> <span class="n">multiprocess</span> <span class="o">=</span> <span class="mf">4</span><span class="p">)</span>
</pre></div>
</div>
</blockquote>
<p>Though we have only asked Ruffus to run <tt class="docutils literal"><span class="pre">combineBlastResults</span></tt>, it traces all the dependencies
of this task and runs all the necessary parts of the pipeline.</p>
<div class="admonition note">
<p class="first admonition-title">Note</p>
<p class="last">The full code for this example can be found  <a class="reference external" href="part1_code.html#examples-bioinformatics-part1-code"><em>here</em></a>
suitable for pasting into the python command shell.</p>
</div>
<p>The <tt class="docutils literal"><span class="pre">verbose</span></tt> parameter causes the following output to be printed to stderr as the pipeline
runs:</p>
<blockquote>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">pipeline_run</span><span class="p">([</span><span class="n">combineBlastResults</span><span class="p">],</span> <span class="n">verbose</span> <span class="o">=</span> <span class="mf">2</span><span class="p">,</span> <span class="n">multiprocess</span> <span class="o">=</span> <span class="mf">4</span><span class="p">)</span>
<span class="go">    Job = [original.fa -&gt; *.segment] completed</span>
<span class="go">Completed Task = splitFasta</span>
<span class="go">    Job = [1.segment -&gt; 1.blastResult] completed</span>
<span class="go">    Job = [3.segment -&gt; 3.blastResult] completed</span>
<span class="go">    Job = [2.segment -&gt; 2.blastResult] completed</span>
<span class="go">    Job = [4.segment -&gt; 4.blastResult] completed</span>
<span class="go">Completed Task = runBlast</span>
<span class="go">    Job = [[1.blastResult, 2.blastResult, 3.blastResult, 4.blastResult] -&gt; final.blast_results] completed</span>
<span class="go">Completed Task = combineBlastResults</span>
</pre></div>
</div>
</blockquote>
</blockquote>
</div>
<div class="section" id="step-5-testing-dependencies">
<h2>Step 5. Testing dependencies<a class="headerlink" href="#step-5-testing-dependencies" title="Permalink to this headline">¶</a></h2>
<blockquote>
<p>If we invoked <a class="reference external" href="../../pipeline_functions.html#pipeline-functions-pipeline-run"><em>pipeline_run</em></a> again, nothing
further would happen because the
pipeline is now up-to-date. But what if the pipeline had not run to completion?</p>
<p>We can simulate the failure of one of the <tt class="docutils literal"><span class="pre">blastall</span></tt> jobs by deleting its results:</p>
<blockquote>
<div class="highlight-python"><div class="highlight"><pre><span class="n">os</span><span class="o">.</span><span class="n">unlink</span><span class="p">(</span><span class="s">&quot;4.blastResult&quot;</span><span class="p">)</span>
</pre></div>
</div>
</blockquote>
<p>Let us use the <a class="reference external" href="../../pipeline_functions.html#pipeline-functions-pipeline-printout"><em>pipeline_printout</em></a>
function to print out the dependencies of the pipeline at a high <tt class="docutils literal"><span class="pre">verbose</span></tt> level which
will show both complete and incomplete jobs:</p>
<blockquote>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">sys</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">pipeline_printout</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="p">[</span><span class="n">combineBlastResults</span><span class="p">],</span> <span class="n">verbose</span> <span class="o">=</span> <span class="mf">4</span><span class="p">)</span>

<span class="go">________________________________________</span>
<span class="go">Tasks which are up-to-date:</span>

<span class="go">Task = splitFasta</span>
<span class="go">    &quot;Split sequence file into as many fragments as appropriate depending on the size of</span>
<span class="go">               original_fasta&quot;</span>


<span class="go">________________________________________</span>
<span class="go">Tasks which will be run:</span>

<span class="go">Task = runBlast</span>
<span class="go">    &quot;Run blast&quot;</span>
<span class="go">       Job = [4.segment</span>
<span class="go">             -&gt;4.blastResult]</span>
<span class="go">         Job needs update: Missing file 4.blastResult</span>

<span class="go">Task = combineBlastResults</span>
<span class="go">    &quot;Combine blast results&quot;</span>
<span class="go">       Job = [[1.blastResult, 2.blastResult, 3.blastResult, 4.blastResult]</span>
<span class="go">             -&gt;final.blast_results]</span>
<span class="go">         Job needs update: Missing file 4.blastResult</span>

<span class="go">________________________________________</span>
</pre></div>
</div>
</blockquote>
<p>Only the parts of the pipeline which involve the missing BLAST result will be rerun.
We can confirm this by invoking the pipeline.</p>
<blockquote>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">pipeline_run</span><span class="p">([</span><span class="n">combineBlastResults</span><span class="p">],</span> <span class="n">verbose</span> <span class="o">=</span> <span class="mf">2</span><span class="p">,</span> <span class="n">multiprocess</span> <span class="o">=</span> <span class="mf">4</span><span class="p">)</span>

<span class="go">    Job = [1.segment -&gt; 1.blastResult] unnecessary: already up to date</span>
<span class="go">    Job = [2.segment -&gt; 2.blastResult] unnecessary: already up to date</span>
<span class="go">    Job = [3.segment -&gt; 3.blastResult] unnecessary: already up to date</span>
<span class="go">    Job = [4.segment -&gt; 4.blastResult] completed</span>
<span class="go">Completed Task = runBlast</span>
<span class="go">    Job = [[1.blastResult, 2.blastResult, 3.blastResult, 4.blastResult] -&gt; final.blast_results] completed</span>
<span class="go">Completed Task = combineBlastResults</span>
</pre></div>
</div>
</blockquote>
</blockquote>
</div>
<div class="section" id="what-is-next">
<h2>What is next?<a class="headerlink" href="#what-is-next" title="Permalink to this headline">¶</a></h2>
<blockquote>
In the <a class="reference external" href="part2.html#examples-bioinformatics-part2"><em>next (short) part</em></a>,
we shall add some standard (boilerplate) code to
turn this BLAST pipeline into a (slightly more) useful python program.</blockquote>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar">
        <div class="sphinxsidebarwrapper">
            <h3><a href="../../contents.html">Table Of Contents</a></h3>
            <ul>
<li><a class="reference external" href="">Construction of a simple pipeline to run BLAST jobs</a><ul>
<li><a class="reference external" href="#overview">Overview</a></li>
<li><a class="reference external" href="#prerequisites">Prerequisites</a><ul>
<li><a class="reference external" href="#ruffus">1. Ruffus</a></li>
<li><a class="reference external" href="#id2">2. BLAST</a></li>
<li><a class="reference external" href="#human-refseq-sequence-database">3. human refseq sequence database</a></li>
<li><a class="reference external" href="#test-sequences">4. test sequences</a></li>
</ul>
</li>
<li><a class="reference external" href="#code">Code</a></li>
<li><a class="reference external" href="#step-1-splitting-up-the-query-sequences">Step 1. Splitting up the query sequences</a></li>
<li><a class="reference external" href="#step-2-run-blast-jobs-in-parallel">Step 2. Run BLAST jobs in parallel</a></li>
<li><a class="reference external" href="#step-3-combining-blast-results">Step 3. Combining BLAST results</a></li>
<li><a class="reference external" href="#step-4-running-the-pipeline">Step 4. Running the pipeline</a></li>
<li><a class="reference external" href="#step-5-testing-dependencies">Step 5. Testing dependencies</a></li>
<li><a class="reference external" href="#what-is-next">What is next?</a></li>
</ul>
</li>
</ul>

            <h4>Previous topic</h4>
            <p class="topless"><a href="../../glossary.html"
                                  title="previous chapter">Glossary</a></p>
            <h4>Next topic</h4>
            <p class="topless"><a href="part2.html"
                                  title="next chapter">Part 2: A slightly more practical pipeline to run blasts jobs</a></p>
            <h3>This Page</h3>
            <ul class="this-page-menu">
              <li><a href="../../_sources/examples/bioinformatics/index.txt"
                     rel="nofollow">Show Source</a></li>
            </ul>
    
          <div id="searchbox" style="display: none">
            <h3>Quick search</h3>
              <form class="search" action="../../search.html" method="get">
                <input type="text" name="q" size="18" />
                <input type="submit" value="Go" />
                <input type="hidden" name="check_keywords" value="yes" />
                <input type="hidden" name="area" value="default" />
              </form>
              <p class="searchtip" style="font-size: 90%">
              Enter search terms or a module, class or function name.
              </p>
          </div>
          <script type="text/javascript">$('#searchbox').show(0);</script>
    <h3> Quick Reference:</h3>
    <ul>
        <ul>
            <li><a href="../../faq.html">FAQ</a>                                               </li>
            <li><a href="../../history.html">Changes</a>                                       </li>
            <li><a href="../../todo.html">Future plans</a>                                     </li>
        </ul>
        <h3><a href="../../decorators/decorators.html">Decorators:</a></h3>   
        <ul>
            <li><a href="../../decorators/follows.html">@follows / mkdir</a>                       </li>
            <li><a href="../../decorators/files.html">@files</a>                                   </li>
            <li><a href="../../decorators/split.html">@split</a>                                   </li>
            <li><a href="../../decorators/transform.html">@transform</a>                           </li>
            <li><a href="../../decorators/merge.html">@merge</a>                                   </li>
            <li><a href="../../decorators/posttask.html">@posttask touch_file</a>                  </li>
            <li><a href="../../decorators/jobs_limit.html">@jobs_limit</a>                         </li>
            <li><a href="../../decorators/split_ex.html">@split (regex / add_inputs)</a>             </li>
            <li><a href="../../decorators/transform_ex.html">@transform (add_inputs) </a>          </li>
            <li><a href="../../decorators/collate.html">@collate</a>                               </li>
            <li><a href="../../decorators/collate_ex.html">@collate (add_inputs)        </a>       </li>
            <li><a href="../../decorators/jobs_limit.html">@jobs_limit</a>                         </li>
            <li><a href="../../decorators/files_ex.html">@files (on the fly)</a>                   </li>
            <li><a href="../../decorators/parallel.html">@parallel</a>                             </li>
            <li><a href="../../decorators/check_if_uptodate.html">@check_if_uptodate</a>           </li>
        </ul>
    
        <h4 ><a href="../../decorators/indicator_objects.html">Indicator objects</a></h4>
        <h4 >Pipeline functions</h4>
        <ul>
            <li><a href="../../pipeline_functions.html#pipeline-functions-pipeline-run">pipeline_run</a>                       </li>
            <li><a href="../../pipeline_functions.html#pipeline-functions-pipeline-printout">pipeline_printout</a>                      </li>
            <li><a href="../../pipeline_functions.html#pipeline-functions-pipeline-printout-graph">pipeline_printout_graph</a>          </li>
        </ul>
    </ul>

        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="../../genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="part2.html" title="Part 2: A slightly more practical pipeline to run blasts jobs"
             >next</a> |</li>
        <li class="right" >
          <a href="../../glossary.html" title="Glossary"
             >previous</a> |</li>
        Ruffus v. 2.2
            <li><a href="../../index.html">Home</a> | </li>
            <li><a href="../../contents.html">Contents</a> | </li>
            <li><a href="../../installation.html">Install</a>  | </li>
            <li><a href="../../tutorials/simple_tutorial/simple_tutorial.html">Tutorial</a>  / </li>
            <li><a href="../../tutorials/manual/manual_introduction.html">Manual</a>  / </li>
            <li><a href="">Bioinformatics</a>  | </li>
            <li><a href="../../cheatsheet.html">Cheat sheet</a> | </li>
            <li><a href="../code_template/code_template.html">Python Template</a> | </li>
            <li><a href="../../gallery.html">Gallery</a>  &raquo;</li>
 
      </ul>
    </div>
    <div class="footer">
      &copy; Copyright 2010, Leo Goodstadt 顧維斌.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 0.6b1.
    </div>
  </body>
</html>